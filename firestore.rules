rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    function isAdmin() {
      return request.auth != null && 
        (request.auth.token.admin == true || request.auth.token.role == 'admin');
    }
    
    function isModerator() {
      return request.auth != null && 
        (request.auth.token.moderator == true || request.auth.token.role == 'moderator');
    }
    
    function isValidProductData() {
      return request.resource.data.keys().hasAll(['title', 'description', 'price', 'categoryId', 'createdBy']) &&
        request.resource.data.title is string &&
        request.resource.data.title.size() > 0 &&
        request.resource.data.description is string &&
        request.resource.data.description.size() > 0 &&
        request.resource.data.price is number &&
        request.resource.data.price > 0 &&
        request.resource.data.categoryId is string &&
        request.resource.data.categoryId.size() > 0 &&
        request.resource.data.createdBy == request.auth.uid;
    }
    
    // Categories collection - Public read, admin write
    match /categories/{categoryId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Products collection - Enhanced rules
    match /products/{productId} {
      // Anyone can read active products
      allow read: if true;
      
      // Authenticated users can create products with valid data
      allow create: if isAuthenticated() && isValidProductData();
      
      // Users can update their own products, admins can update any
      allow update: if isAuthenticated() && 
        (isOwner(resource.data.createdBy) || isAdmin() || isModerator());
      
      // Users can delete their own products, admins can delete any
      allow delete: if isAuthenticated() && 
        (isOwner(resource.data.createdBy) || isAdmin());
    }
    
    // Users collection - User profiles
    match /users/{userId} {
      // Users can read their own profile, admins can read any
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      
      // Users can create/update their own profile
      allow create, update: if isAuthenticated() && isOwner(userId) &&
        request.resource.data.uid == userId;
      
      // Only admins can delete user profiles
      allow delete: if isAdmin();
    }
    
    // Analytics collection - Admin and system only
    match /analytics/{analyticsId} {
      allow read: if isAdmin();
      allow write: if isAdmin();
    }
    
    // System configuration - Admin only
    match /config/{configId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
    
    // Messages/Chat collection (if implemented)
    match /messages/{messageId} {
      // Users can read messages they're part of
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants);
      
      // Users can create messages
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      
      // Users can update their own messages
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.senderId;
      
      // Admins can delete any message
      allow delete: if isAdmin();
    }
    
    // Reviews/Ratings collection (if implemented)
    match /reviews/{reviewId} {
      // Anyone can read reviews
      allow read: if true;
      
      // Authenticated users can create reviews
      allow create: if isAuthenticated() && 
        request.resource.data.reviewerId == request.auth.uid;
      
      // Users can update their own reviews
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.reviewerId;
      
      // Admins can delete inappropriate reviews
      allow delete: if isAdmin() || isModerator();
    }
    
    // Reports collection - For reporting inappropriate content
    match /reports/{reportId} {
      // Only admins and moderators can read reports
      allow read: if isAdmin() || isModerator();
      
      // Authenticated users can create reports
      allow create: if isAuthenticated() && 
        request.resource.data.reporterId == request.auth.uid;
      
      // Only admins can update/delete reports
      allow update, delete: if isAdmin();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Users can read their own notifications
      allow read: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // System can create notifications, users can update read status
      allow create: if isAdmin();
      allow update: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
      
      // Users can delete their own notifications
      allow delete: if isAuthenticated() && 
        request.auth.uid == resource.data.userId;
    }
    
    // Default deny rule for any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}